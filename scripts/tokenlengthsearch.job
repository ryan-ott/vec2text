#!/bin/bash

#SBATCH --partition=gpu
#SBATCH --gpus=1
#SBATCH --job-name=Reproduce token length space 
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=18
#SBATCH --time=20:00:00

module purge
module load 2022
module load Anaconda3/2022.05

source /home/scur0989/v2t-env/bin/activate
cd /home/scur0989/vec2text/

# Function to extract BLEU score from log file
get_bleu_score() {
    local log_file=$1
    # Wait for the log file to be created and populated
    while [ ! -f "$log_file" ] || [ ! -s "$log_file" ]; do
        sleep 10
    done
    # Extract BLEU score using grep and awk
    bleu_score=$(grep "eval_bleu_score:" "$log_file" | tail -n 1 | awk '{print $2}')
    echo "$bleu_score"
}

# Initialize variables
start_len=32
current_len=$start_len
step_size=4
error_threshold=5.0  # Threshold for stopping the search
dataset="dbpedia-entity"   # Dataset to use CHANGE HERE

# Create results file
echo "max_length,bleu_score,dataset" > experiment_results.csv

# Function to run the experiment for a given max_length
run_experiment() {
    local max_len=$1
    local output_file="/home/scur0989/vec2text/scripts/outputs/repro_T2_${dataset}_${max_len}maxtoken%A.out"
    local log_file="scripts/outputs/repro_T2_gtr-50steps-8beam_${dataset}_1ksamples_${max_len}maxtoken.log"

    # Update SBATCH output directive
    sed -i "s|#SBATCH --output=.*|#SBATCH --output=$output_file|" "$0"

    # Run the Python script
    python reproduce_T2_fix.py \
        --model jxm/gtr__nq__32__correct \
        --steps 50 \
        --beam-width 4 \
        --beir_dataset $dataset \
        --max_samples 1000 \
        --max_length $max_len > "$log_file"

    # Get BLEU score
    local bleu_score=$(get_bleu_score "$log_file")
    echo "$max_len,$bleu_score,$dataset" >> experiment_results.csv
    echo "$bleu_score"
}

# Run initial experiment at start_len
initial_bleu=$(run_experiment $start_len)
echo "Initial BLEU score at $start_len tokens: $initial_bleu"

# Determine which direction(s) to search based on initial score
if [ $(echo "$initial_bleu >= (100 - $error_threshold)" | bc -l) -eq 1 ]; then
    # If initial score is close to 100%, only search downward
    direction="down"
    current_len=$((start_len - step_size))
elif [ $(echo "$initial_bleu <= (0 + $error_threshold)" | bc -l) -eq 1 ]; then
    # If initial score is close to 0%, only search upward
    direction="up"
    current_len=$((start_len + step_size))
else
    # If initial score is between 0% and 100%, search in both directions
    # First search downward
    direction="down"
    current_len=$((start_len - step_size))
fi

# Main loop
while true; do
    if [ $direction == "down" ]; then
        bleu_score=$(run_experiment $current_len)
        
        if [ $(echo "$bleu_score >= (100 - $error_threshold)" | bc -l) -eq 1 ]; then
            echo "Reached 100% threshold at length $current_len"
            # Switch to upward search from start_len + step_size
            direction="up"
            current_len=$((start_len + step_size))
            continue
        fi
        
        current_len=$((current_len - step_size))
    else  # direction is "up"
        bleu_score=$(run_experiment $current_len)
        
        if [ $(echo "$bleu_score <= (0 + $error_threshold)" | bc -l) -eq 1 ]; then
            echo "Reached 0% threshold at length $current_len"
            break
        fi
        
        current_len=$((current_len + step_size))
    fi
done

echo "Experiment complete. Results saved in experiment_results.csv"
